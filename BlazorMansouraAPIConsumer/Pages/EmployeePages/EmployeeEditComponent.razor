@page "/Emps/Edit/{id:int}"
@* @inject IService<Employee> EmpService *@
<PageTitle>Edit Employee</PageTitle>
<h3>EmployeeEditComponent</h3>
@if (EmpObj != null)
{
    <EditForm Model="EmpObj" OnSubmit="Save">
        <div>
            <label>Name</label>
            <InputText @bind-Value="EmpObj.Name" class="form form-control" ></InputText>
        </div>
        <div>
            <label>Salary</label>
            <InputNumber @bind-Value="EmpObj.Salary" class="form form-control"></InputNumber>
        </div>
        <div>
            <label>Address</label>
            <InputText @bind-Value="EmpObj.Address" class="form form-control" ></InputText>
        </div>
        <div>
            <label>Department</label>
            <InputSelect @bind-Value="EmpObj.DeptID" class="form form-control">
                @foreach (var DeptItem in DeptList)
                {
                    <option value="@DeptItem.Id">@DeptItem.Name</option>
                }

            </InputSelect>
        </div>
        <input type="submit" value="Save" class="btn btn-success" />
    </EditForm>
}
else
{
    <h1>Wait .. or invalid id</h1>
}



@code {
    [Parameter]
    public int id { get; set; }

    public Employee EmpObj { get; set; }

    public List<Department> DeptList { get; set; }

    [Inject]
    public IService<Employee> EmpService { get; set; }

    [Inject]
    public IService<Department> DeptService { get; set; }

    [Inject]
    public NavigationManager NavManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        EmpObj=await EmpService.GetByID(id);
        DeptList = await DeptService.GetAll();

        base.OnInitializedAsync();
    }

    private async Task Save()
    {
        //api
        await EmpService.Update(id, EmpObj);
        NavManager.NavigateTo("/Emps");
    }
}
